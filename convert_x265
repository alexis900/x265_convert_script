#!/bin/bash

# convert_x265: Batch video converter to H265 (HEVC) or container changer
#
# Usage:
#   ./convert_x265 [options]
#
# Options:
#   --help, -h                Show this help message and exit.
#   --version, -v             Show script version and exit.
#   --dir, -d <directory>     Specify the directory to process (overrides actual_dir).
#   --file, -f <file>         Specify a single file to process.
#   --log-level <level>       Set log level (DEBUG, INFO, WARNING, ERROR).
#   --estimate-size <file>    Estimate the size after H265 conversion for a file.
#   --check-xattr <file>      Check if the xattr user.larger is present on a file.
#   --cleanup-temp-files      Clean up temporary files created during processing.
#
# Examples:
#   ./convert_x265 --dir /path/to/videos --log-level DEBUG
#   ./convert_x265 --file /path/to/video.mp4
#   ./convert_x265 --estimate-size /path/to/video.mp4
#
# Requirements:
#   - ffmpeg, ffprobe, bc, grep, cut, stat, wc, numfmt
#   - Configuration in config/preferences.conf
#   - Helper scripts in src/
#
# Author: Alejandro Martín Pérez
# License: MIT License


# Detect if running from a deb package install or from source directory
SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
if [[ -d "/usr/local/share/x265_convert_script" && $SCRIPT_DIR == "/usr/local/bin" ]]; then
    SHARE_PATH="/usr/local/share/x265_convert_script"
else
    SHARE_PATH="$SCRIPT_DIR"
fi

SRC_PATH="$SHARE_PATH/src"
# Load environment variables and utility functions
if [[ -f "$SHARE_PATH/config/preferences.conf" ]]; then
    source "$SHARE_PATH/config/preferences.conf"
else
    echo "Error: preferences.conf not found in the current directory. Exiting..."
    exit 1
fi

if [[ -f "$SRC_PATH/logging.sh" ]]; then
    source "$SRC_PATH/logging.sh"
else
    echo "Error: logging.sh not found in $SRC_PATH. Exiting..."
    exit 1
fi

if [[ -f "$SRC_PATH/file_utils.sh" ]]; then
    source "$SRC_PATH/file_utils.sh"
else
    echo "Error: file_utils.sh not found in $SRC_PATH. Exiting..."
    exit 1
fi

if [[ -f "$SRC_PATH/backup.sh" ]]; then
    source "$SRC_PATH/backup.sh"
else
    echo "Error: backup.sh not found in $SRC_PATH. Exiting..."
    exit 1
fi

if [[ -f "$SRC_PATH/media_utils.sh" ]]; then
    source "$SRC_PATH/media_utils.sh"
else
    echo "Error: media_utils.sh not found in $SRC_PATH. Exiting..."
    exit 1
fi


# Verify if the required files exist
declare -A required_files=(
    ["preferences.conf"]="$SHARE_PATH/config"
    ["logging.sh"]="$SRC_PATH"
    ["file_utils.sh"]="$SRC_PATH"
    ["backup.sh"]="$SRC_PATH"
    ["check_update.sh"]="$SRC_PATH"
    ["media_utils.sh"]="$SRC_PATH"
)
for file in "${!required_files[@]}"; do
    if [[ ! -f "${required_files[$file]}/$file" ]]; then
        echo "Error: Required file $file does not exist in ${required_files[$file]}. Exiting..."
        exit 1
    fi
done


# Function to display help
display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --help, -h                Show this help message and exit"
    echo "  --version, -v             Show script version and exit"
    echo "  --dir, -d <directory>     Specify the directory to process (overrides actual_dir)"
    echo "  --file, -f <file>         Specify a single file to process"
    echo "  --log-level <level>       Set log level (DEBUG, INFO, WARNING, ERROR)"
    echo "  --estimate-size <file>    Estimate the size after H265 conversion for a file"
    echo "  --check-xattr <file>      Check if the xattr user.larger is present on a file"
    echo "  --cleanup-temp-files      Clean up temporary files created during processing"
    echo
    echo "Examples:"
    echo "  $0 --dir /path/to/videos --log-level DEBUG"
    echo "  $0 --file /path/to/video.mp4"
    echo "  $0 --estimate-size /path/to/video.mp4"
    exit 0
}


# Function to estimate the size of the file after conversion to H265
# Parameters:
#   $1 - The input video file to estimate the size for.
estimate_video_size() {
    local input_file="$1"
    local part_duration=10  # Duration in seconds for parts
    local total_size=0
    local total_parts=10 # Number of parts to split the file into
    local total_duration=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "$input_file" | cut -d. -f1)

    cleanup_temp_files

    log "INFO" "Estimating size for: $input_file" "${LOG_FILE}"
    
    # Ensure the /tmp directory exists
    mkdir -p /tmp

    # Convert the file in 10 parts of 10 seconds to estimate the size
    for i in $(seq 0 $((total_parts - 1))); do
        local tmp_output="/tmp/tmp_h265_part_$i.${OUTPUT_EXTENSION}"
        log "DEBUG" "Processing part $i of file $input_file" "${LOG_FILE}"

        ffmpeg -i "$input_file" -ss $((i * part_duration)) -t "$part_duration" -c:v $VIDEO_CODEC -preset $PRESET -crf $CRF -c:a $AUDIO_CODEC -sn -f matroska "$tmp_output" &>> "${FFMPEG_LOG_FILE}"

        if [[ $? -ne 0 ]]; then
            log "ERROR" "Error converting part $i of file $input_file. FFmpeg output: $(cat "${FFMPEG_LOG_FILE}")" "${LOG_FILE}"
            cleanup_temp_files
            return 1
        fi

        # Sum the size of each part
        if [[ -f "$tmp_output" ]]; then
            local part_size=$(wc -c < "$tmp_output")
            total_size=$((total_size + part_size))
            log "DEBUG" "Part $i processed, size: $(human_size $total_size)" "${LOG_FILE}"
        else
            log "ERROR" "Could not create temporary file $tmp_output" "${LOG_FILE}"
            cleanup_temp_files
            return 1
        fi
    done

    if [[ -z "$total_duration" || "$total_duration" -eq 0 ]]; then
        log "ERROR" "Invalid total duration for $input_file. Cannot estimate size." "${LOG_FILE}"
        cleanup_temp_files
        return 1
    fi

    # Adjustment: the estimation is proportional to the size of the converted parts relative to the total duration

    estimated_size=$(( total_size * total_duration / (part_duration * total_parts) ))
    log "INFO" "Total estimated size for $input_file: $(human_size $estimated_size)" "${LOG_FILE}"
    echo "$estimated_size"

    # Delete all temporary files at once
    cleanup_temp_files
}

# Function to convert the file to H265 or change the container
convert_to_h265_or_change_container() {
    local input_file="$1"
    local output_file="$2"
    local codec="$3"

    log "INFO" "Processing file: $input_file" "${LOG_FILE}"

    # Create a backup of the original file
    backup_file "$input_file"

    # Estimate the size of the file after conversion
    log "DEBUG" "Estimating size for $input_file" "${LOG_FILE}"
    local estimated_size=$(estimate_video_size "$input_file")
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Error in estimate_video_size while estimating the size of file $input_file" "${LOG_FILE}"
        return 1
    fi
    log "INFO" "Estimated size for the file after conversion: $estimated_size bytes" "${LOG_FILE}"

    local original_size=$(stat -c%s "$input_file")
    log "INFO" "Original file size: $original_size bytes" "${LOG_FILE}"

    if (( estimated_size > original_size )) && [[ "$codec" != "h264" ]]; then
        log "INFO" "The estimated size in H265 is larger than the original and the codec is not H264. Converting to H264." "${LOG_FILE}"
        VIDEO_CODEC="libx264"
        output_file="$(dirname "$input_file")/$(basename "$input_file" | cut -d. -f1).x264.${OUTPUT_EXTENSION}"
    else
        VIDEO_CODEC="libx265"
    fi

    if has_valid_subtitles "$input_file"; then
        video_convert "$input_file" "$output_file" "$VIDEO_CODEC" "$SUBTITLE_CODEC" "$AUDIO_CODEC"
    else
        video_convert "$input_file" "$output_file" "$VIDEO_CODEC" "" "$AUDIO_CODEC"
    fi

    if [[ $? -eq 0 ]]; then
        log "INFO" "Conversion completed successfully: $output_file" "${LOG_FILE}"
        if verify_quality "$input_file" "$output_file"; then
            log "INFO" "Deleting original file: $input_file" "${LOG_FILE}"
            rm "$input_file"
            delete_backup "$input_file"
        else
            log "WARNING" "The quality of the converted file is not acceptable. Keeping the original file." "${LOG_FILE}"
        fi
    else
        log "ERROR" "Error during conversion: $output_file" "${LOG_FILE}"
        log "INFO" "Restoring the original file from backup: $input_file" "${LOG_FILE}"
        cp "$BACKUP_DIR/$(basename "$input_file")" "$input_file"
    fi
}

# Function to handle signals
handle_signal() {
    log "INFO" "Signal received, cleaning up and exiting..." "${LOG_FILE}"
    cleanup_temp_files
    exit 1
}

# Register signal handlers
trap handle_signal SIGINT SIGTERM

function find_files () {

    while true; do
        log "INFO" "Searching for files in ${ACTUAL_DIR}..." "${LOG_FILE}"

        files=$(find_pending_files)

        if [[ -z "$files" ]]; then
            log "INFO" "No files found to convert or change container. Exiting..." "${LOG_FILE}"
            break
        fi

        while IFS= read -r file; do
            process_file "$file"
        done <<< "$files"

        log "INFO" "Waiting 10 seconds before the next iteration..." "${LOG_FILE}"
        sleep ${SLEEP_TIME}
    done
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h)
            display_help
            ;;
        --version|-v)
            check_update="$SRC_PATH/check_update.sh"
            if [[ -f "$check_update" ]]; then
                source "$check_update"
                check_update_version
                exit 0
            else
                echo "Error: $check_update not found. Exiting..."
                exit 1
            fi
            ;;
        --dir|-d)
            if [[ -n "$2" ]]; then
                ACTUAL_DIR="$2"
                shift
            else
                echo "Error: --dir requires a directory path as an argument."
                exit 1
            fi
            ;;
        --file|-f)
            if [[ -n "$2" ]]; then
                if [[ -f "$2" ]]; then
                    process_file "$2"
                else
                    echo "Error: File $2 does not exist."
                    exit 1
                fi
            else
                echo "Error: --file requires a file path as an argument."
                exit 1
            fi
            ;;
        --codec|-c)
            if [[ -n "$2" ]]; then
                detect_codec "$2"
                exit 0
            else
                echo "Error: --codec requires a codec as an argument."
                exit 1
            fi
            ;;
        --log-level)
            if [[ -n "$2" ]]; then
                LOG_LEVEL="$2"
                shift
            else
                echo "Error: --log-level requires a log level as an argument."
                exit 1
            fi
            ;;
        --estimate-size)
            if [[ -n "$2" ]]; then
                estimate_video_size "$2"
                exit 0
            else
                echo "Error: --estimate-size requires a file path as an argument."
                exit 1
            fi
            ;;
        --check-xattr)
            if [[ -n "$2" ]]; then
                check_xattr_larger "$2"
                exit 0
            else
                echo "Error: --check-xattr requires a file path as an argument."
                exit 1
            fi
            ;;
        # This option cleans up temporary files created during processing and exits immediately.
        --cleanup-temp-files)
            cleanup_temp_files
            exit 0
            ;;
        --list-profiles)
            if [[ -d "$SRC_PATH/profiles" ]]; then
                echo "Available profiles:"
                ls "$SRC_PATH/profiles"
            else
                echo "Error: Profiles directory not found."
                exit 1
            fi
            exit 0
            ;;
        --profile)
            if [[ -n "$2" ]]; then
                load_profile "$2"
                exit 0
            else
                echo "Error: --profile requires a profile file as an argument."
                exit 1
            fi
            ;;
        *)
            echo "Unknown option: $1"
            display_help
            ;;
    esac
    shift
done

# Ensure a directory is specified if --dir or --file is not used
if [[ -z "${ACTUAL_DIR}" ]]; then
    echo "Error: No directory specified. Use --dir to define it."
    exit 1
else
    find_files
fi


# Export LOG_LEVEL for use in logging.sh
export LOG_LEVEL

exit 0