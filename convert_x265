#!/usr/bin/env bash

# convert_x265: Batch video converter to H265 (HEVC) or container changer
#
# Usage:
#   ./convert_x265 [options]
#
# Options:
#   --help, -h                      Show this help message and exit.
#   --version, -v                   Show script version and exit.
#   --input, -i <file|directory>    Specify the directory to process (overrides actual_dir).
#   --log-level <level>             Set log level (DEBUG, INFO, WARNING, ERROR).
#   --estimate-size <file>          Estimate the size after H265 conversion for a file.
#   --check-xattr <file>            Check if the xattr user.larger is present on a file.
#   --cleanup-temp-files            Clean up temporary files created during processing.
#
# Examples:
#   ./convert_x265 --input /path/to/videos --log-level DEBUG
#   ./convert_x265 --estimate-size /path/to/video.mp4
#
# Requirements:
#   - ffmpeg, ffprobe, bc, grep, cut, stat, wc, numfmt
#   - Configuration in config/preferences.conf
#   - Helper scripts in src/
#
# Author: Alejandro Martín Pérez
# License: MIT License


# Detect if running from a deb package install or from source directory
readonly SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
readonly SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
if [[ -d "/usr/local/share/x265_convert_script" && $SCRIPT_DIR == "/usr/local/bin" ]]; then
    readonly SHARE_PATH="/usr/local/share/x265_convert_script"
else
    readonly SHARE_PATH="$SCRIPT_DIR"
fi

readonly SRC_PATH="$SHARE_PATH/src"
# Load environment variables and utility functions
if [[ -f "$SHARE_PATH/config/preferences.conf" ]]; then
    source "$SHARE_PATH/config/preferences.conf"
else
    echo "Error: preferences.conf not found in the current directory. Exiting..."
    exit 1
fi

# Verify if the required files exist
declare -A required_files=(
    ["logging.sh"]="$SRC_PATH"
    ["media_utils.sh"]="$SRC_PATH"
    ["file_utils.sh"]="$SRC_PATH"
    ["backup.sh"]="$SRC_PATH"
    ["check_update.sh"]="$SRC_PATH"
    ["display_help.sh"]="$SRC_PATH"
    ["arguments.sh"]="$SRC_PATH"
)

for file in "${!required_files[@]}"; do
    full_path="${required_files[$file]}/$file"
    if [[ ! -f "$full_path" ]]; then
        echo "Error: Required file $file does not exist in ${required_files[$file]}. Exiting..."
        exit 1
    fi

    if [[ "$file" == *.sh ]]; then
        source "$full_path"
    fi
done

# Function to handle signals
handle_signal() {
    log "INFO" "Signal received, cleaning up and exiting..." "${LOG_FILE}"
    cleanup_temp_files
    exit 1
}

# Register signal handlers
trap handle_signal SIGINT SIGTERM

function find_files () {

    while true; do
        log "INFO" "Searching for files in ${ACTUAL_DIR}..." "${LOG_FILE}"

        files=$(find_pending_files)

        if [[ -z "$files" ]]; then
            log "INFO" "No files found to convert or change container. Exiting..." "${LOG_FILE}"
            break
        fi

        while IFS= read -r file; do
            process_file "$file"
        done <<< "$files"

        log "INFO" "Waiting 10 seconds before the next iteration..." "${LOG_FILE}"
        sleep ${SLEEP_TIME}
    done
}

# Ensure a directory is specified if --dir or --file is not used
if [[ -z "${ACTUAL_DIR}" ]]; then
    echo "Error: No directory specified. Use --dir to define it."
    exit 1
else
    find_files
fi


# Export LOG_LEVEL for use in logging.sh
export LOG_LEVEL

exit 0

