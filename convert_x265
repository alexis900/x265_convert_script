#!/bin/bash

# This script converts video files to H265 (HEVC) format or changes their container.
SHARE_PATH="/usr/local/share/x265_convert_script"
#SHARE_PATH="$(pwd)"
# Load environment variables and utility functions
if [[ -f "$SHARE_PATH/preferences.conf" ]]; then
    source "$SHARE_PATH/preferences.conf"
else
    echo "Error: preferences.conf not found in the current directory. Exiting..."
    exit 1
fi

if [[ -f "$SHARE_PATH/logging.sh" ]]; then
    source "$SHARE_PATH/logging.sh"
else
    echo "Error: logging.sh not found in $SHARE_PATH. Exiting..."
    exit 1
fi

if [[ -f "$SHARE_PATH/file_utils.sh" ]]; then
    source "$SHARE_PATH/file_utils.sh"
else
    echo "Error: file_utils.sh not found in $SHARE_PATH. Exiting..."
    exit 1
fi

if [[ -f "$SHARE_PATH/backup.sh" ]]; then
    source "$SHARE_PATH/backup.sh"
else
    echo "Error: backup.sh not found in $SHARE_PATH. Exiting..."
    exit 1
fi

# Verify if the required files exist
required_files=("logging.sh" "file_utils.sh" "preferences.conf" "backup.sh" "check_update.sh")
for file in "${required_files[@]}"; do
    if [[ ! -f "$SHARE_PATH/$file" ]]; then
        echo "Error: Required file $file does not exist in $SHARE_PATH. Exiting..."
        exit 1
    fi
done

process_file() {
    local file="$1"
    local codec=$(detect_codec "$file")
    if [[ -z "$codec" ]]; then
        log "ERROR" "Error: Could not detect codec of file $file" "${LOG_FILE}"
        return 1
    fi
    local h265_path="$(dirname "$file")/$(basename "$file" | cut -d. -f1).x265.mkv"
    log "DEBUG" "Detected codec for $file: $codec" "${LOG_FILE}"
    convert_to_h265_or_change_container "$file" "$h265_path" "$codec"
}


# Function to display help
display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --help       Display this help message and exit"
    echo "  --version    Display the version information and exit"
    echo "  --dir PATH   Specify the directory to process (overrides actual_dir)"
    echo "  --file PATH  Specify the file to process"
    echo "  --log-level LEVEL  Set the log level (DEBUG, INFO, WARNING, ERROR)"
    exit 0
}


# Function to check if the file has valid subtitles
has_valid_subtitles() {
    ffprobe -v $FFMPEG_LOG_LEVEL -select_streams s -show_entries stream=codec_name -of csv=p=0 "$1" | grep -qE 'srt|subrip|ass|ssa'
}

# Function to estimate the size of the file after conversion to H265
estimate_h265_size() {
    local input_file="$1"
    local part_duration=10  # Duration in seconds for parts
    local total_size=0
    rm -f /tmp/tmp_h265_part_*.mkv
    log "INFO" "Estimating size for: $input_file" "${LOG_FILE}"
    
    # Ensure the /tmp directory exists
    mkdir -p /tmp

    # Convert the file in 10 parts of 10 seconds to estimate the size
    for i in $(seq 0 9); do
        local tmp_output="/tmp/tmp_h265_part_$i.mkv"
        log "DEBUG" "Processing part $i of file $input_file" "${LOG_FILE}"

        ffmpeg -i "$input_file" -ss $((i * part_duration)) -t "$part_duration" -c:v libx265 -preset $FFMPEG_PRESET -crf $FFMPEG_CRF -c:a $FFMPEG_AUDIO_CODEC -sn -f matroska "$tmp_output" &>> "$ffmpeg_log_file"

        if [[ $? -ne 0 ]]; then
            log "ERROR" "Error converting part $i of file $input_file" "${LOG_FILE}"
            cleanup_temp_files
            return 1
        fi

        # Sum the size of each part
        if [[ -f "$tmp_output" ]]; then
            local part_size=$(wc -c < "$tmp_output")
            total_size=$((total_size + part_size))
            log "DEBUG" "Part $i processed, size: $part_size bytes" "${LOG_FILE}"
        else
            log "ERROR" "Could not create temporary file $tmp_output" "${LOG_FILE}"
            cleanup_temp_files
            return 1
        fi
    done

    # Delete all temporary files at once
    rm /tmp/tmp_h265_part_*.mkv

    log "INFO" "Total estimated size for $input_file: $total_size bytes" "${LOG_FILE}"
    
    echo "$total_size"
}

# Function to verify the quality of the converted file
verify_quality() {
    local input_file="$1"
    local output_file="$2"

    log "INFO" "Verifying quality of converted file: $output_file" "${LOG_FILE}"

    # Compare the duration of the original and converted files
    local original_duration=$(ffprobe -v $FFMPEG_LOG_LEVEL -show_entries format=duration -of csv=p=0 "$input_file")
    local converted_duration=$(ffprobe -v $FFMPEG_LOG_LEVEL -show_entries format=duration -of csv=p=0 "$output_file")

    if [[ $(echo "$original_duration == $converted_duration" | bc -l) -eq 1 ]]; then
        log "INFO" "The duration of the converted file matches the original." "${LOG_FILE}"
    else
        log "WARNING" "The duration of the converted file does not match the original." "${LOG_FILE}"
    fi
}

# Function to convert the file to H265 or change the container
convert_to_h265_or_change_container() {
    local input_file="$1"
    local output_file="$2"
    local codec="$3"

    log "INFO" "Processing file: $input_file" "${LOG_FILE}"

    # Create a backup of the original file
    backup_file "$input_file"

    # Estimate the size of the file after conversion
    log "DEBUG" "Estimating size for $input_file" "${LOG_FILE}"
    local estimated_size=$(estimate_h265_size "$input_file")
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Error in estimate_h265_size while estimating the size of file $input_file" "${LOG_FILE}"
        return 1
    fi
    log "INFO" "Estimated size for the file after conversion: $estimated_size bytes" "${LOG_FILE}"

    local original_size=$(stat -c%s "$input_file")
    log "INFO" "Original file size: $original_size bytes" "${LOG_FILE}"

    if (( estimated_size > original_size )) && [[ "$codec" != "h264" ]]; then
        log "INFO" "The estimated size in H265 is larger than the original and the codec is not H264. Converting to H264." "${LOG_FILE}"
        FFMPEG_VIDEO_CODEC="libx264"
        output_file="$(dirname "$input_file")/$(basename "$input_file" | cut -d. -f1).x264.mkv"
    else
        FFMPEG_VIDEO_CODEC="libx265"
    fi

    if has_valid_subtitles "$input_file"; then
        log "INFO" "The file has subtitles. Starting conversion with subtitles." "${LOG_FILE}"
        ffmpeg -i "$input_file" -map 0 -c:v $FFMPEG_VIDEO_CODEC -preset $FFMPEG_PRESET -crf $FFMPEG_CRF -c:a $FFMPEG_AUDIO_CODEC -c:s $FFMPEG_SUBTITLE_CODEC "$output_file" 2>> "$ffmpeg_log_file"
    else
        log "INFO" "The file does not have subtitles. Starting conversion without subtitles." "${LOG_FILE}"
        ffmpeg -i "$input_file" -c:v $FFMPEG_VIDEO_CODEC -preset $FFMPEG_PRESET -crf $FFMPEG_CRF -c:a $FFMPEG_AUDIO_CODEC -sn "$output_file" 2>> "$ffmpeg_log_file"
    fi

    if [[ $? -eq 0 ]]; then
        log "INFO" "Conversion completed successfully: $output_file" "${LOG_FILE}"
        if verify_quality "$input_file" "$output_file"; then
            log "INFO" "Deleting original file: $input_file" "${LOG_FILE}"
            rm "$input_file"
            delete_backup "$input_file"
        else
            log "WARNING" "The quality of the converted file is not acceptable. Keeping the original file." "${LOG_FILE}"
        fi
    else
        log "ERROR" "Error during conversion: $output_file" "${LOG_FILE}"
        log "INFO" "Restoring the original file from backup: $input_file" "${LOG_FILE}"
        cp "$BACKUP_DIR/$(basename "$input_file")" "$input_file"
    fi
}

# Function to handle signals
handle_signal() {
    log "INFO" "Signal received, cleaning up and exiting..." "${LOG_FILE}"
    cleanup_temp_files
    exit 1
}

# Register signal handlers
trap handle_signal SIGINT SIGTERM

function find_files () {

    while true; do
        log "INFO" "Searching for files in $actual_dir..." "${LOG_FILE}"

        files=$(find_pending_files)

        if [[ -z "$files" ]]; then
            log "INFO" "No files found to convert or change container. Exiting..." "${LOG_FILE}"
            break
        fi

        while IFS= read -r file; do
            process_file "$file"
        done <<< "$files"

        log "INFO" "Waiting 10 seconds before the next iteration..." "${LOG_FILE}"
        sleep 10
    done
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h)
            display_help
            ;;
        --version|-v)
            source "$SHARE_PATH/check_update.sh"
            check_update_version
            exit 0
            ;;
        --dir|-d)
            if [[ -n "$2" ]]; then
                actual_dir="$2"
                shift
            else
                echo "Error: --dir requires a directory path as an argument."
                exit 1
            fi
            ;;
        --file|-f)
            if [[ -n "$2" ]]; then
                if [[ -f "$2" ]]; then
                    process_file "$2"
                else
                    echo "Error: File $2 does not exist."
                    exit 1
                fi
            else
            echo "Error: --file requires a file path as an argument."
            exit 1
            fi
            ;;
        --codec|-c)
            if [[ -n "$2" ]]; then
                detect_codec "$2"
                exit 0
            else
                echo "Error: --codec requires a codec as an argument."
                exit 1
            fi
            ;;
        --log-level)
            if [[ -n "$2" ]]; then
                LOG_LEVEL="$2"
                shift
            else
                echo "Error: --log-level requires a log level as an argument."
                exit 1
            fi
            ;;
        *)
            echo "Unknown option: $1"
            display_help
            ;;
    esac
    shift
done

# Ensure a directory is specified if --dir or --file is not used
if [[ -z "$actual_dir" ]]; then
    echo "Error: No directory specified. Use --dir to define it."
    exit 1
fi

find_files

# Export LOG_LEVEL for use in logging.sh
export LOG_LEVEL

exit 0