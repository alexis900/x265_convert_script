#!/bin/bash

# This script converts video files to H265 (HEVC) format or changes their container.

#SHARE_PATH="/usr/local/share/x265_convert_script"
SHARE_PATH="."

# Load environment variables and utility functions
source $SHARE_PATH/env.sh
source $SHARE_PATH/logging.sh
source $SHARE_PATH/file_utils.sh

# Function to display help
display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --help       Display this help message and exit"
    echo "  --version    Display the version information and exit"
    echo "  --dir PATH   Specify the directory to process (overrides actual_dir)"
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h)
            display_help
            ;;
        --version|-v)
            source $SHARE_PATH/version
            echo "$PACKAGE_NAME version $VERSION"
            exit 0
            ;;
        --dir|-d)
            if [[ -n "$2" ]]; then
                actual_dir="$2"
                shift
            else
                echo "Error: --dir requires a directory path as an argument."
                exit 1
            fi
            ;;
        *)
            echo "Unknown option: $1"
            display_help
            ;;
    esac
    shift
done



# Verify if the required files exist
required_files=("env.sh" "logging.sh" "file_utils.sh")
for file in "${required_files[@]}"; do
    if [[ ! -f "$SHARE_PATH/$file" ]]; then
        echo "Error: Required file $file does not exist. Exiting..."
        exit 1
    fi
done

# Common ffmpeg parameters
FFMPEG_PRESET="medium"
FFMPEG_CRF=22
FFMPEG_VIDEO_CODEC="libx265"
FFMPEG_AUDIO_CODEC="copy"
FFMPEG_SUBTITLE_CODEC="srt"
FFMPEG_LOG_LEVEL="error"

# Backup directory
BACKUP_DIR="$actual_dir/backup"

# Function to create a backup of the original file
backup_file() {
    local file="$1"
    mkdir -p "$BACKUP_DIR"
    cp "$file" "$BACKUP_DIR"
    log "INFO" "Backup created for: $file" "$log_file"
}

# Function to delete the backup of the original file
delete_backup() {
    local file="$1"
    local backup_file="$BACKUP_DIR/$(basename "$file")"
    if [[ -f "$backup_file" ]]; then
        rm "$backup_file"
        log "INFO" "Backup deleted for: $file" "$log_file"
    fi
}

# Function to check if the file has valid subtitles
has_valid_subtitles() {
    ffprobe -v $FFMPEG_LOG_LEVEL -select_streams s -show_entries stream=codec_name -of csv=p=0 "$1" | grep -qE 'srt|subrip|ass|ssa'
}

# Function to estimate the size of the file after conversion to H265
estimate_h265_size() {
    local input_file="$1"
    local part_duration=10  # Duration in seconds for parts
    local total_size=0
    rm -f /tmp/tmp_h265_part_*.mkv
    log "INFO" "Estimating size for: $input_file" "$log_file"
    
    # Ensure the /tmp directory exists
    mkdir -p /tmp

    # Convert the file in 10 parts of 10 seconds to estimate the size
    for i in $(seq 0 9); do
        local tmp_output="/tmp/tmp_h265_part_$i.mkv"
        log "INFO" "Processing part $i of file $input_file" "$log_file"

        ffmpeg -i "$input_file" -ss $((i * part_duration)) -t "$part_duration" -c:v libx265 -preset $FFMPEG_PRESET -crf $FFMPEG_CRF -c:a $FFMPEG_AUDIO_CODEC -sn -f matroska "$tmp_output" &>> "$ffmpeg_log_file"

        if [[ $? -ne 0 ]]; then
            log "ERROR" "Error converting part $i of file $input_file" "$log_file"
            cleanup_temp_files
            return 1
        fi

        # Sum the size of each part
        if [[ -f "$tmp_output" ]]; then
            local part_size=$(wc -c < "$tmp_output")
            total_size=$((total_size + part_size))
            log "INFO" "Part $i processed, size: $part_size bytes" "$log_file"
        else
            log "ERROR" "Could not create temporary file $tmp_output" "$log_file"
            cleanup_temp_files
            return 1
        fi
    done

    # Delete all temporary files at once
    rm /tmp/tmp_h265_part_*.mkv

    log "INFO" "Total estimated size for $input_file: $total_size bytes" "$log_file"
    
    echo "$total_size"
}

# Function to verify the quality of the converted file
verify_quality() {
    local input_file="$1"
    local output_file="$2"

    log "INFO" "Verifying quality of converted file: $output_file" "$log_file"

    # Compare the duration of the original and converted files
    local original_duration=$(ffprobe -v $FFMPEG_LOG_LEVEL -show_entries format=duration -of csv=p=0 "$input_file")
    local converted_duration=$(ffprobe -v $FFMPEG_LOG_LEVEL -show_entries format=duration -of csv=p=0 "$output_file")

    if [[ $(echo "$original_duration == $converted_duration" | bc -l) -eq 1 ]]; then
        log "INFO" "The duration of the converted file matches the original." "$log_file"
    else
        log "WARNING" "The duration of the converted file does not match the original." "$log_file"
    fi
}

# Function to convert the file to H265 or change the container
convert_to_h265_or_change_container() {
    local input_file="$1"
    local output_file="$2"
    local codec="$3"

    log "INFO" "Processing file: $input_file" "$log_file"

    # Create a backup of the original file
    backup_file "$input_file"

    # Estimate the size of the file after conversion
    estimate_h265_size "$input_file"
    local estimated_size=$?
    local estimated_size=$(estimate_h265_size "$input_file")
    if [[ $? -ne 0 ]]; then
        log "ERROR" "Error in estimate_h265_size while estimating the size of file $input_file" "$log_file"
        return 1
    fi
    log "INFO" "Estimated size for the file after conversion: $estimated_size bytes" "$log_file"

    local original_size=$(stat -c%s "$input_file")
    log "INFO" "Original file size: $original_size bytes" "$log_file"

    if (( estimated_size > original_size )) && [[ "$codec" != "h264" ]]; then
        log "INFO" "The estimated size in H265 is larger than the original and the codec is not H264. Converting to H264." "$log_file"
        FFMPEG_VIDEO_CODEC="libx264"
        output_file="$(dirname "$input_file")/$(basename "$input_file" | cut -d. -f1).x264.mkv"
    else
        FFMPEG_VIDEO_CODEC="libx265"
    fi

    if has_valid_subtitles "$input_file"; then
        log "INFO" "The file has subtitles. Starting conversion with subtitles." "$log_file"
        ffmpeg -i "$input_file" -map 0 -c:v $FFMPEG_VIDEO_CODEC -preset $FFMPEG_PRESET -crf $FFMPEG_CRF -c:a $FFMPEG_AUDIO_CODEC -c:s $FFMPEG_SUBTITLE_CODEC "$output_file" 2>> "$ffmpeg_log_file"
    else
        log "INFO" "The file does not have subtitles. Starting conversion without subtitles." "$log_file"
        ffmpeg -i "$input_file" -c:v $FFMPEG_VIDEO_CODEC -preset $FFMPEG_PRESET -crf $FFMPEG_CRF -c:a $FFMPEG_AUDIO_CODEC -sn "$output_file" 2>> "$ffmpeg_log_file"
    fi

    if [[ $? -eq 0 ]]; then
        log "INFO" "Conversion completed successfully: $output_file" "$log_file"
        if verify_quality "$input_file" "$output_file"; then
            log "INFO" "Deleting original file: $input_file" "$log_file"
            rm "$input_file"
            delete_backup "$input_file"
        else
            log "WARNING" "The quality of the converted file is not acceptable. Keeping the original file." "$log_file"
        fi
    else
        log "ERROR" "Error during conversion: $output_file" "$log_file"
        log "INFO" "Restoring the original file from backup: $input_file" "$log_file"
        cp "$BACKUP_DIR/$(basename "$input_file")" "$input_file"
    fi
}

# Function to clean up temporary files
cleanup_temp_files() {
    rm -f /tmp/tmp_h265_part_*.mkv
    log "INFO" "Temporary files deleted" "$log_file"
}

# Function to handle signals
handle_signal() {
    log "INFO" "Signal received, cleaning up and exiting..." "$log_file"
    cleanup_temp_files
    exit 1
}

# Register signal handlers
trap handle_signal SIGINT SIGTERM

process_file() {
    local file="$1"
    local codec=$(detect_codec "$file")
    if [[ -z "$codec" ]]; then
        log "ERROR" "Error: Could not detect codec of file $file" "$log_file"
        return 1
    fi
    local h265_path="$(dirname "$file")/$(basename "$file" | cut -d. -f1).x265.mkv"
    convert_to_h265_or_change_container "$file" "$h265_path" "$codec"
}

while true; do
    log "INFO" "Searching for files in $actual_dir..." "$log_file"

    files=$(find_pending_files)

    if [[ -z "$files" ]]; then
        log "INFO" "No files found to convert or change container. Exiting..." "$log_file"
        break
    fi

    while IFS= read -r file; do
        process_file "$file"
    done <<< "$files"

    log "INFO" "Waiting 10 seconds before the next iteration..." "$log_file"
    sleep 10
done

exit 0